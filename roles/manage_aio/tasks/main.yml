---
- name: Build hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: '{{ inventory_hostname }} {{ name }}'
    create: true
    mode: '644'
  tags: update_hostname

- name: Set hostname
  ansible.builtin.hostname:
    name: '{{ name }}'

- name: Update cache
  ansible.builtin.dnf:
    update_cache: true

- name: Install jq
  ansible.builtin.dnf:
    name: jq
    state: present

- name: Install python3 and python3 modules
  ansible.builtin.dnf:
    name: ['python{{ python_version }}', 'python{{ python_version }}-requests']
    state: present

# --------------------------------------------------------------------#
#                    Setup docker docker-compose  #
# --------------------------------------------------------------------#
- name: Check if docker is running
  ansible.builtin.shell: ps aux | grep docker | grep -v grep
  ignore_errors: true
  register: service_docker_status
  changed_when: service_docker_status.rc != 0

- name: Check if docker-compose installed
  ansible.builtin.shell: command -v docker compose >/dev/null 2>&1
  register: is_docker_compose_install
  ignore_errors: true
  changed_when: is_docker_compose_install.rc != 0

- name: Add repository docker
  become: true
  ansible.builtin.command:
    cmd: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  changed_when: service_docker_status.rc != 0

- name: Install docker
  ansible.builtin.dnf:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    state: present

- name: Start Docker service
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Allow non root user to run docker
  ansible.builtin.user:
    name: lab
    groups: [docker]
    append: true

# --------------------------------------------------------------------#
#                Create config directories and files  #
# --------------------------------------------------------------------#
- name: Delete old rule files
  ansible.builtin.file:
    state: absent
    path: /opt/{{ role_name }}/bbfw/

- name: Create directory
  ansible.builtin.file:
    path: /opt/{{ role_name }}/{{ item }}
    state: directory
  loop: [conf, ssl, bbfw]

- name: Copy config file
  ansible.builtin.copy:
    src: conf/{{ item }}
    dest: /opt/{{ role_name }}/conf/
    owner: root
    group: root
    mode: '644'
  loop: [etcd1.conf, etcd2.conf, etcd3.conf]

- name: Update calicoctl admin file
  ansible.builtin.template:
    src: calicoctl.cfg.j2
    dest: /opt/{{ role_name }}/conf/calicoctl.cfg

- name: Copy ssl file
  ansible.builtin.copy:
    content: '{{ item.file_var }}'
    dest: /opt/{{ role_name }}/ssl/{{ item.file_name }}
  with_items:
    - {file_var: '{{ ca_cert }}', file_name: ca.pem}
    - {file_var: '{{ cert }}', file_name: etcd.pem}
    - {file_var: '{{ key }}', file_name: etcd-key.pem}

# --------------------------------------------------------------------#
#                        AddSchemaDefinitions  #
# --------------------------------------------------------------------#
- name: Copy rule files
  ansible.builtin.copy:
    src: bbfw/
    dest: /opt/{{ role_name }}/bbfw/
    mode: '644'

- name: List all rule files
  ansible.builtin.find:
    paths: /opt/{{ role_name }}/bbfw/
    recurse: true
    patterns: '*.yaml'
  register: rule_files

- name: Create init.sh
  vars:
    files: '{{ rule_files.files }}'
    base: /opt/{{ role_name }}/bbfw/
  ansible.builtin.template:
    src: init.sh.j2
    dest: /opt/{{ role_name }}/bbfw/init.sh
    mode: '755'

#--------------------------------------------------------------------#
#                         Run docker-compose  #
#--------------------------------------------------------------------#
- name: Update docker-compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /opt/{{ role_name }}/docker-compose.yml
    mode: '644'

- name: Start docker compose
  community.docker.docker_compose_v2:
    project_src: /opt/{{ role_name }}
    state: present
  when: is_docker_compose_install.rc != 0

- name: Restart docker compose
  community.docker.docker_compose_v2:
    project_src: /opt/{{ role_name }}
    state: restarted
  when: is_docker_compose_install.rc == 0

- name: Check if login page is available and returning status 200
  ansible.builtin.uri:
    url: http://{{ inventory_hostname }}:3000/login
  register: result
  until: result.status == 200
  retries: 10
  delay: 5

- name: Info login to bamboofirewall
  vars:
    msg: |
        # =========================================  #
        #             Login information  #
        # =========================================  #
        # URL: http://{{ inventory_hostname }}:3000
        # Username: admin
        # Password: {{ admin_passwd }}
        # =========================================  #
  ansible.builtin.debug:
    msg: "{{ msg.split('\n') }}"
  run_once: true
  until: result.status == 200
